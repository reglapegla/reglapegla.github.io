// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: godPLiX5oeXKhPMKyYfERC
// Component: _dau56ERG1k

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: u-I3iLDeCNZPb/component
import Button from "../../Button"; // plasmic-import: ws-jSm8NK60EsG/component
import Section from "../../Section"; // plasmic-import: SQzPIQbKwQHt_O/component
import DiagramCard from "../../DiagramCard"; // plasmic-import: DEqBTBYZNftCgL/component
import ProductCard from "../../ProductCard"; // plasmic-import: QS9kc0TcVAkWeG/component
import DetailAbout from "../../DetailAbout"; // plasmic-import: Wpq2nykdl83rxx/component
import PriceSection from "../../PriceSection"; // plasmic-import: 0BmTjQA_R2wn2D/component
import PriceCard from "../../PriceCard"; // plasmic-import: H5FIRoY3JLDull/component
import FooterSection from "../../FooterSection"; // plasmic-import: awRcWNoc8VLdag/component

import { useScreenVariants as useScreenVariantsjjm2RAbUq9FQ1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jjm2rAB-UQ9fQ1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_dark_saa_s_landing_page.module.css"; // plasmic-import: godPLiX5oeXKhPMKyYfERC/projectcss
import sty from "./PlasmicAboutMe.module.css"; // plasmic-import: _dau56ERG1k/css

export type PlasmicAboutMe__VariantMembers = {};
export type PlasmicAboutMe__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutMe__VariantsArgs;
export const PlasmicAboutMe__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutMe__ArgsType = {};
type ArgPropType = keyof PlasmicAboutMe__ArgsType;
export const PlasmicAboutMe__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutMe__OverridesType = {
  root?: p.Flex<"div">;
  headerHeroSection?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  home?: p.Flex<typeof Section>;
  deviceSection?: p.Flex<typeof Section>;
  gallerySection?: p.Flex<typeof Section>;
  productSection?: p.Flex<typeof Section>;
  aboutSection?: p.Flex<typeof Section>;
  priceSection?: p.Flex<typeof PriceSection>;
  startSection?: p.Flex<typeof Section>;
  h3?: p.Flex<"h3">;
  pricingSection?: p.Flex<typeof Section>;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultAboutMeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAboutMe__RenderFunc(props: {
  variants: PlasmicAboutMe__VariantsArgs;
  args: PlasmicAboutMe__ArgsType;
  overrides: PlasmicAboutMe__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjjm2RAbUq9FQ1()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAboutMe.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAboutMe.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAboutMe.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__wqIiD)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/dark_saa_s_landing_page/images/diagramImgsvg.svg",
                fullWidth: 300,
                fullHeight: 100,
                aspectRatio: 2.987552
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___1GRb)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"774px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/dark_saa_s_landing_page/images/ellipseLeftpng.png",
                fullWidth: 469,
                fullHeight: 742,
                aspectRatio: undefined
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___1Ntik)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/dark_saa_s_landing_page/images/ellipseRightpng.png",
                fullWidth: 437,
                fullHeight: 742,
                aspectRatio: undefined
              }}
            />

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"headerHeroSection"}
                data-plasmic-override={overrides.headerHeroSection}
                hasGap={true}
                className={classNames(projectcss.all, sty.headerHeroSection)}
              >
                {true ? (
                  <Navbar
                    data-plasmic-name={"navbar"}
                    data-plasmic-override={overrides.navbar}
                    className={classNames("__wab_instance", sty.navbar)}
                  />
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__nTwXf)}>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s8TYw)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bbeHs
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__h5ROa
                            )}
                            color={"blueBorder" as const}
                            endIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__dAGaQ
                                )}
                                role={"img"}
                              />
                            }
                            startIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__zazlo
                                )}
                                role={"img"}
                              />
                            }
                            submitsForm={true}
                          >
                            {"Learn More"}
                          </Button>
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__lrmIw
                              )}
                              color={"blueBorder" as const}
                              endIcon={
                                <svg
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__oebDc
                                  )}
                                  role={"img"}
                                />
                              }
                              startIcon={
                                <svg
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__xsvFu
                                  )}
                                  role={"img"}
                                />
                              }
                              submitsForm={true}
                            >
                              {"Learn More"}
                            </Button>
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              </p.Stack>
            ) : null}
            <Section
              data-plasmic-name={"home"}
              data-plasmic-override={overrides.home}
              className={classNames("__wab_instance", sty.home)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("mobile" as const)
                  : undefined
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox__laCgU)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wUkTj
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
                    : "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."}
                </div>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__oN1G)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("249px" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/dark_saa_s_landing_page/images/terminalpng.png",
                    fullWidth: 624,
                    fullHeight: 333,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__nkQsL)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("auto" as const)
                  }
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/dark_saa_s_landing_page/images/line1Png.png",
                    fullWidth: 11,
                    fullHeight: 150,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kvNVi)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("50px" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/dark_saa_s_landing_page/images/lineBranchpng.png",
                    fullWidth: 100,
                    fullHeight: 100,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__bqEh)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("auto" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("500px" as const)
                      : ("770px" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("auto" as const)
                  }
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/dark_saa_s_landing_page/images/line2Png.png",
                    fullWidth: 844,
                    fullHeight: 284,
                    aspectRatio: undefined
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jvl2M)}
                >
                  <DiagramCard
                    className={classNames(
                      "__wab_instance",
                      sty.diagramCard___6Lzo7
                    )}
                  />

                  <DiagramCard
                    className={classNames(
                      "__wab_instance",
                      sty.diagramCard__y3UK1
                    )}
                  />

                  <DiagramCard
                    className={classNames(
                      "__wab_instance",
                      sty.diagramCard___8Gd4
                    )}
                  />
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ee25)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button___2BWtB)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateStateVariable"] = true
                        ? (() => {
                            const actionArgs = {};
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariable",
                                interactionUuid: "MndRU0BWeP_",
                                componentUuid: "_dau56ERG1k"
                              },
                              () =>
                                (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  const { objRoot, variablePath } = variable;
                                  undefined;
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["updateStateVariable"] === "object" &&
                        typeof $steps["updateStateVariable"].then === "function"
                      ) {
                        $steps["updateStateVariable"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "MndRU0BWeP_",
                            componentUuid: "_dau56ERG1k"
                          },
                          $steps["updateStateVariable"]
                        );
                      }
                    }}
                  >
                    {"Label"}
                  </Button>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__bcQWh)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/dollarpng.png",
                      fullWidth: 100,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__rLfOe)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/messagepng.png",
                      fullWidth: 100,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__jxBvu)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/importpng.png",
                      fullWidth: 100,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__pxjZd)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/lineBranchpng.png",
                      fullWidth: 100,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__va2A)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/exportpng.png",
                      fullWidth: 100,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__tsDz9)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/message2Png.png",
                      fullWidth: 100,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__rCrLo)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("72px" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/message3Png.png",
                      fullWidth: 100,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__apY1
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
                  }
                </div>
              </div>
            </Section>
            <Section
              data-plasmic-name={"deviceSection"}
              data-plasmic-override={overrides.deviceSection}
              background={"dark" as const}
              className={classNames("__wab_instance", sty.deviceSection)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("mobile" as const)
                  : undefined
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox__uDfod)} />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___7M8DL)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("360px" as const)
                    : ("100%" as const)
                }
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dark_saa_s_landing_page/images/macbookpng.png",
                  fullWidth: 900,
                  fullHeight: 565,
                  aspectRatio: undefined
                }}
              />
            </Section>
            <Section
              data-plasmic-name={"gallerySection"}
              data-plasmic-override={overrides.gallerySection}
              className={classNames("__wab_instance", sty.gallerySection)}
              size={"fullContentGallery" as const}
            >
              <div className={classNames(projectcss.all, sty.freeBox__mmNoz)}>
                <div className={classNames(projectcss.all, sty.columns__jw6W8)}>
                  <div
                    className={classNames(projectcss.all, sty.column__dgY1E)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__u3ACc)}
                      displayHeight={"100%" as const}
                      displayMaxHeight={"300px" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/galleri11Png.png",
                        fullWidth: 700,
                        fullHeight: 300,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__bQpRj)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__j3S0H)}
                      displayHeight={"100%" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/galleri12Png.png",
                        fullWidth: 700,
                        fullHeight: 300,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__uFrrr)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___6SLv3)}
                      displayHeight={"100%" as const}
                      displayMaxHeight={"300px" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/galleri13Png.png",
                        fullWidth: 700,
                        fullHeight: 300,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.columns__rNyWe)}>
                  <div className={classNames(projectcss.all, sty.column__hrF9)}>
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___7Xn2U)}
                      displayHeight={"100%" as const}
                      displayMaxHeight={"300px" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/galleri21Png.png",
                        fullWidth: 700,
                        fullHeight: 300,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__j8Zd2)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__eamK)}
                      displayHeight={"100%" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/galleri22Png.png",
                        fullWidth: 700,
                        fullHeight: 300,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__kXcIg)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__hWRk4)}
                      displayHeight={"100%" as const}
                      displayMaxHeight={"300px" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/galleri23Png.png",
                        fullWidth: 700,
                        fullHeight: 300,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </div>
            </Section>
            <Section
              data-plasmic-name={"productSection"}
              data-plasmic-override={overrides.productSection}
              className={classNames("__wab_instance", sty.productSection)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("mobile" as const)
                  : undefined
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox___4Pk9M)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__nkfcg
                  )}
                >
                  {"Lorem ipsum dolor sit amet"}
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__opvEg
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do \neiusmod tempor incididunt ut labore et dolore magna aliqua."
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__koTkD)}
                  color={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("blue" as const)
                      : ("blue" as const)
                  }
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__wBbwy)}
                      role={"img"}
                    />
                  }
                  link={"#" as const}
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__tldN7)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Dw
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Get Started"
                      : "Get Started"}
                  </div>
                </Button>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oA1Wo)}
                >
                  <ProductCard
                    className={classNames(
                      "__wab_instance",
                      sty.productCard__v10LT
                    )}
                  />

                  <ProductCard
                    className={classNames(
                      "__wab_instance",
                      sty.productCard__okKug
                    )}
                  />
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7Ai3X)}
                >
                  <ProductCard
                    className={classNames(
                      "__wab_instance",
                      sty.productCard__e3ByB
                    )}
                  />

                  <ProductCard
                    className={classNames(
                      "__wab_instance",
                      sty.productCard__jkJZs
                    )}
                  />
                </p.Stack>
              </div>
            </Section>
            <Section
              data-plasmic-name={"aboutSection"}
              data-plasmic-override={overrides.aboutSection}
              background={"dark" as const}
              className={classNames("__wab_instance", sty.aboutSection)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("mobile" as const)
                  : undefined
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox__qzQde)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__rHurU
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "What people say \nabout us"
                    : "What people say about us"}
                </h2>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6JceS)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3HoSf)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___6Td6)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("339px" as const)
                          : ("100%" as const)
                      }
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dark_saa_s_landing_page/images/aboutImgpng.png",
                        fullWidth: 400,
                        fullHeight: 500,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oLc5V)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__fVxFk
                      )}
                    >
                      {"Michael Justin"}
                    </h2>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__g70Go)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__mgPWk)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/dark_saa_s_landing_page/images/aboutIpsumpng.png",
                          fullWidth: 152,
                          fullHeight: 40,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0JNu
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "CEO Company"
                          : "CEO Company"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6OpPg
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__doGpP)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("auto" as const)
                            : ("auto" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/dark_saa_s_landing_page/images/backtippng.png",
                          fullWidth: 34,
                          fullHeight: 32,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g2HKy
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
                        : "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."}
                    </div>
                  </div>
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ym5Is)}
                >
                  <DetailAbout
                    className={classNames(
                      "__wab_instance",
                      sty.detailAbout__puiHe
                    )}
                  />

                  <DetailAbout
                    className={classNames(
                      "__wab_instance",
                      sty.detailAbout__sQ0Us
                    )}
                  />

                  <DetailAbout
                    className={classNames(
                      "__wab_instance",
                      sty.detailAbout__vdcIk
                    )}
                  />
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___2Z34I)}
                >
                  <DetailAbout
                    className={classNames(
                      "__wab_instance",
                      sty.detailAbout__vzgC4
                    )}
                  />

                  <DetailAbout
                    className={classNames(
                      "__wab_instance",
                      sty.detailAbout__bhv35
                    )}
                  />

                  <DetailAbout
                    className={classNames(
                      "__wab_instance",
                      sty.detailAbout__ecMwG
                    )}
                  />
                </p.Stack>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__blH32)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/arrowLeftpng.png",
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__dHy6V)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/arrowRightpng2.png",
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
              </div>
            </Section>
            {true ? (
              <PriceSection
                data-plasmic-name={"priceSection"}
                data-plasmic-override={overrides.priceSection}
                className={classNames("__wab_instance", sty.priceSection)}
              />
            ) : null}
            <Section
              data-plasmic-name={"startSection"}
              data-plasmic-override={overrides.startSection}
              className={classNames("__wab_instance", sty.startSection)}
              size={"fullContentWidth" as const}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__fjOzk)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__gadja)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/pricingImgsvg.svg",
                      fullWidth: 300,
                      fullHeight: 67,
                      aspectRatio: 4.468401
                    }}
                  />

                  <div
                    className={classNames(projectcss.all, sty.columns__mRtEz)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__rg8NM)}
                    >
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Start using our product today"
                          : "Start using our product today"}
                      </h3>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mk2Wu
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Faster than free analytics tools. Access to all your data, with respect to the privacy of your users."
                          : "Faster than free analytics tools. Access to all your data, with respect to the privacy of your users."}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__tZsmV)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___8DHbz
                        )}
                        color={"white" as const}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg___8YCdg
                            )}
                            role={"img"}
                          />
                        }
                        link={"#" as const}
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__efXKy
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hpPUx
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Get Started"
                            : "Get Started"}
                        </div>
                      </Button>
                    </div>
                  </div>
                </div>
              ) : null}
            </Section>
            {true ? (
              <Section
                data-plasmic-name={"pricingSection"}
                data-plasmic-override={overrides.pricingSection}
                className={classNames("__wab_instance", sty.pricingSection)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__sJi8W)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns___6Wih9)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___5N0Ys)}
                    >
                      <PriceCard
                        borders={["flatLeft"]}
                        className={classNames(
                          "__wab_instance",
                          sty.priceCard__i2Xwx
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__bYw3O)}
                    >
                      <PriceCard
                        borders={["flatCenter"]}
                        className={classNames(
                          "__wab_instance",
                          sty.priceCard__dmcFu
                        )}
                      />

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kLfqw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3MHvF
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "We Recommended"
                              : "We Recommended"}
                          </div>
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__nVdjH)}
                    >
                      <PriceCard
                        borders={["flatRight"]}
                        className={classNames(
                          "__wab_instance",
                          sty.priceCard__vlPFc
                        )}
                      />
                    </div>
                  </p.Stack>
                </div>
              </Section>
            ) : null}
            {true ? (
              <FooterSection
                data-plasmic-name={"footerSection"}
                data-plasmic-override={overrides.footerSection}
                className={classNames("__wab_instance", sty.footerSection)}
              />
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "navbar",
    "home",
    "deviceSection",
    "gallerySection",
    "productSection",
    "aboutSection",
    "priceSection",
    "startSection",
    "h3",
    "pricingSection",
    "footerSection"
  ],
  headerHeroSection: ["headerHeroSection", "navbar"],
  navbar: ["navbar"],
  home: ["home"],
  deviceSection: ["deviceSection"],
  gallerySection: ["gallerySection"],
  productSection: ["productSection"],
  aboutSection: ["aboutSection"],
  priceSection: ["priceSection"],
  startSection: ["startSection", "h3"],
  h3: ["h3"],
  pricingSection: ["pricingSection"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  navbar: typeof Navbar;
  home: typeof Section;
  deviceSection: typeof Section;
  gallerySection: typeof Section;
  productSection: typeof Section;
  aboutSection: typeof Section;
  priceSection: typeof PriceSection;
  startSection: typeof Section;
  h3: "h3";
  pricingSection: typeof Section;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutMe__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutMe__VariantsArgs;
    args?: PlasmicAboutMe__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutMe__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAboutMe__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAboutMe__ArgProps,
          internalVariantPropNames: PlasmicAboutMe__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutMe__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutMe";
  } else {
    func.displayName = `PlasmicAboutMe.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutMe = Object.assign(
  // Top-level PlasmicAboutMe renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    navbar: makeNodeComponent("navbar"),
    home: makeNodeComponent("home"),
    deviceSection: makeNodeComponent("deviceSection"),
    gallerySection: makeNodeComponent("gallerySection"),
    productSection: makeNodeComponent("productSection"),
    aboutSection: makeNodeComponent("aboutSection"),
    priceSection: makeNodeComponent("priceSection"),
    startSection: makeNodeComponent("startSection"),
    h3: makeNodeComponent("h3"),
    pricingSection: makeNodeComponent("pricingSection"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicAboutMe
    internalVariantProps: PlasmicAboutMe__VariantProps,
    internalArgProps: PlasmicAboutMe__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutMe;
/* prettier-ignore-end */
