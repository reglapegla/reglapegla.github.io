// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: godPLiX5oeXKhPMKyYfERC
// Component: u-I3iLDeCNZPb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: vx1pBeHhyGfbw/component
import Button from "../../Button"; // plasmic-import: ws-jSm8NK60EsG/component

import { useScreenVariants as useScreenVariantsjjm2RAbUq9FQ1 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Jjm2rAB-UQ9fQ1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_dark_saa_s_landing_page.module.css"; // plasmic-import: godPLiX5oeXKhPMKyYfERC/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: u-I3iLDeCNZPb/css

export type PlasmicNavbar__VariantMembers = {};
export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
  home?: p.Flex<typeof Button>;
  home2?: p.Flex<"div">;
};

export interface DefaultNavbarProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjjm2RAbUq9FQ1()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <Logo
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames("__wab_instance", sty.logo)}
          smallLogo={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? undefined
              : undefined
          }
        />
      ) : null}
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__cjz0Z)}
        onClick={async event => {
          const $steps = {};
          $steps["updateStateVariable"] = true
            ? (() => {
                const actionArgs = {};
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "WGZvQBM_M",
                    componentUuid: "u-I3iLDeCNZPb"
                  },
                  () =>
                    (({ variable, value, startIndex, deleteCount }) => {
                      const { objRoot, variablePath } = variable;
                      undefined;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
          if (
            typeof $steps["updateStateVariable"] === "object" &&
            typeof $steps["updateStateVariable"].then === "function"
          ) {
            $steps["updateStateVariable"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariable",
                interactionUuid: "WGZvQBM_M",
                componentUuid: "u-I3iLDeCNZPb"
              },
              $steps["updateStateVariable"]
            );
          }
        }}
      >
        <Button
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          className={classNames("__wab_instance", sty.home)}
          color={"navLink" as const}
          endIcon={
            <svg
              className={classNames(projectcss.all, sty.svg___9Xb26)}
              role={"img"}
            />
          }
          link={`/`}
          startIcon={
            <svg
              className={classNames(projectcss.all, sty.svg__sfnZr)}
              role={"img"}
            />
          }
          submitsForm={true}
        >
          <div
            data-plasmic-name={"home2"}
            data-plasmic-override={overrides.home2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.home2
            )}
            onClick={async event => {
              const $steps = {};
              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = {};
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "navigation",
                        interactionUuid: "MOop5sZ5M",
                        componentUuid: "u-I3iLDeCNZPb"
                      },
                      () =>
                        (({ destination }) => {
                          __nextRouter?.push(destination);
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "navigation",
                    interactionUuid: "MOop5sZ5M",
                    componentUuid: "u-I3iLDeCNZPb"
                  },
                  $steps["goToHomepage"]
                );
              }
            }}
          >
            {"Home"}
          </div>
        </Button>
        <Button
          className={classNames("__wab_instance", sty.button__klLIo)}
          color={"navLink" as const}
          endIcon={
            <svg
              className={classNames(projectcss.all, sty.svg__iWpE8)}
              role={"img"}
            />
          }
          startIcon={
            <svg
              className={classNames(projectcss.all, sty.svg___9F4K1)}
              role={"img"}
            />
          }
          submitsForm={true}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wAt5K
            )}
          >
            {"About me"}
          </div>
        </Button>
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sRskU)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__erZy)}
              color={"navLink" as const}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__e98S)}
                  role={"img"}
                />
              }
              link={"#" as const}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__gn1MQ)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eriiq
                )}
              >
                {"Works"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button___4SkI9)}
              color={"navLink" as const}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__xBmoI)}
                  role={"img"}
                />
              }
              link={"#" as const}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__rsEz)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7GeJy
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Contact"
                  : "Contact"}
              </div>
            </Button>
          </p.Stack>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo", "home", "home2"],
  logo: ["logo"],
  home: ["home", "home2"],
  home2: ["home2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof Logo;
  home: typeof Button;
  home2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    home: makeNodeComponent("home"),
    home2: makeNodeComponent("home2"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
